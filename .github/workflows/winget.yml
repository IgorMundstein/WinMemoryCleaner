name: Submit to WinGet

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

env:
  FORK_REPO: ${{ github.repository_owner }}/WinGet
  UPSTREAM_REPO: microsoft/winget-pkgs

jobs:
  submit-winget:
    name: Submit to WinGet Packages
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Get latest release tag
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const tag = release.tag_name;
            core.setOutput('tag', tag);
            return tag;

      - name: Validate inputs
        run: |
          if [ -z "${{ secrets.WINGET_TOKEN }}" ]; then
            echo "::error::WINGET_TOKEN secret is not set!"
            exit 1
          fi

      - name: Check if version already exists
        id: check_winget
        run: |
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
            "https://api.github.com/repos/${{ env.UPSTREAM_REPO }}/contents/manifests/i/${{ github.repository_owner }}/WinMemoryCleaner/${{ steps.get_release.outputs.tag }}")
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "::notice::Version ${{ steps.get_release.outputs.tag }} already exists. Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::Version not found. Proceeding with submission."
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Download release and get SHA256
        if: steps.check_winget.outputs.skip == 'false'
        id: download
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.get_release.outputs.tag }}/WinMemoryCleaner.exe"
          echo "::notice::Downloading from $DOWNLOAD_URL"

          curl -fL --retry 3 --retry-delay 5 -o WinMemoryCleaner.exe "$DOWNLOAD_URL"
          
          SHA256=$(sha256sum WinMemoryCleaner.exe | cut -d ' ' -f1)
          echo "sha256=${SHA256}" >> $GITHUB_OUTPUT
          echo "::notice::SHA256: ${SHA256}"

      - name: Fetch repository metadata
        if: steps.check_winget.outputs.skip == 'false'
        id: metadata
        uses: actions/github-script@v7
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('desc', repo.description.trim());
            core.setOutput('homepage', repo.homepage || repo.html_url);
            core.setOutput('license', repo.license.spdx_id);

      - name: Create Manifest Files
        if: steps.check_winget.outputs.skip == 'false'
        id: create_manifest
        run: |
          set -e
          MANIFEST_DIR="winget-manifest"
          mkdir -p "$MANIFEST_DIR"
          cat > "${MANIFEST_DIR}/${{ github.repository_owner }}.WinMemoryCleaner.yaml" <<EOF
          # yaml-language-server: \$schema=https://aka.ms/winget-manifest.version.1.6.0.schema.json
          PackageIdentifier: ${{ github.repository_owner }}.WinMemoryCleaner
          PackageVersion: ${{ steps.get_release.outputs.tag }}
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.6.0
          EOF

          cat > "${MANIFEST_DIR}/${{ github.repository_owner }}.WinMemoryCleaner.installer.yaml" <<EOF
          # yaml-language-server: \$schema=https://aka.ms/winget-manifest.installer.1.6.0.schema.json
          PackageIdentifier: ${{ github.repository_owner }}.WinMemoryCleaner
          PackageVersion: ${{ steps.get_release.outputs.tag }}
          InstallerType: exe
          Installers:
          - Architecture: x64
            InstallerUrl: https://github.com/${{ github.repository }}/releases/download/${{ steps.get_release.outputs.tag }}/WinMemoryCleaner.exe
            InstallerSha256: ${{ steps.download.outputs.sha256 }}
            InstallerSwitches:
              Silent: /Package
              SilentWithProgress: /Package
          ManifestType: installer
          ManifestVersion: 1.6.0
          EOF

          cat > "${MANIFEST_DIR}/${{ github.repository_owner }}.WinMemoryCleaner.locale.en-US.yaml" <<EOF
          # yaml-language-server: \$schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json
          PackageIdentifier: ${{ github.repository_owner }}.WinMemoryCleaner
          PackageVersion: ${{ steps.get_release.outputs.tag }}
          PackageLocale: en-US
          Publisher: Igor Mundstein
          PackageName: Windows Memory Cleaner
          License: ${{ steps.metadata.outputs.license }}
          PackageUrl: ${{ steps.metadata.outputs.homepage }}
          ShortDescription: ${{ steps.metadata.outputs.desc }}
          ManifestType: defaultLocale
          ManifestVersion: 1.6.0
          EOF
          echo "manifest_dir=$MANIFEST_DIR" >> $GITHUB_OUTPUT

      - name: Validate WinGet Manifest
        if: steps.check_winget.outputs.skip == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://github.com/microsoft/winget-cli/releases/download/v1.7.10861/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
          pip install yamllint
          yamllint ${{ steps.create_manifest.outputs.manifest_dir }}/*.yaml

      - name: Create Pull Request
        if: steps.check_winget.outputs.skip == 'false'
        env:
          GH_TOKEN: ${{ secrets.WINGET_TOKEN }}
        run: |
          set -e
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git clone "https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ env.FORK_REPO }}.git" winget-fork
          cd winget-fork
          git remote add upstream "https://github.com/${{ env.UPSTREAM_REPO }}.git"
          git fetch upstream master --depth=1
          
          BRANCH_NAME="add/${{ github.repository_owner }}/WinMemoryCleaner/${{ steps.get_release.outputs.tag }}"
          git checkout -b "$BRANCH_NAME" upstream/master
          
          mkdir -p "manifests/i/${{ github.repository_owner }}/WinMemoryCleaner/${{ steps.get_release.outputs.tag }}"
          cp ../winget-manifest/*.yaml "manifests/i/${{ github.repository_owner }}/WinMemoryCleaner/${{ steps.get_release.outputs.tag }}/"
          
          git add .
          git commit -m "Add ${{ github.repository_owner }}.WinMemoryCleaner version ${{ steps.get_release.outputs.tag }}"
          git push origin "$BRANCH_NAME"
          
          gh pr create \
            --repo "${{ env.UPSTREAM_REPO }}" \
            --head "$(echo ${{ env.FORK_REPO }} | cut -d'/' -f1):${BRANCH_NAME}" \
            --base master \
            --title "Add ${{ github.repository_owner }}.WinMemoryCleaner ${{ steps.get_release.outputs.tag }}" \
            --body "Automated submission for ${{ github.repository_owner }}.WinMemoryCleaner version ${{ steps.get_release.outputs.tag }}."
            
          echo "::notice::Pull request created successfully."

      - name: Cleanup
        if: always()
        run: rm -f WinMemoryCleaner.exe
