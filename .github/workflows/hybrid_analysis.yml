name: Submit to Hybrid Analysis

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

env:
  HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}

jobs:
  submit-hybrid-analysis:
    name: Submit latest release to Hybrid Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Get latest release tag
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('tag', release.tag_name);

      - name: Validate Hybrid Analysis API Key
        run: |
          if [ -z "${{ env.HYBRID_ANALYSIS_API_KEY }}" ]; then
            echo "::error::HYBRID_ANALYSIS_API_KEY secret is not set!"
            exit 1
          fi

      - name: Download WinMemoryCleaner.exe
        run: |
          RELEASE_TAG=${{ steps.get_release.outputs.tag }}
          echo "::group::Downloading WinMemoryCleaner.exe from release $RELEASE_TAG"
          curl -fL --retry 3 --retry-delay 5 -o WinMemoryCleaner.exe \
            "https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/WinMemoryCleaner.exe"
          echo "::endgroup::"

      - name: Submit file to Hybrid Analysis
        id: ha_submit
        run: |
          RESPONSE=$(curl --request POST --location \
            --url https://hybrid-analysis.com/api/v2/submit/file \
            --header "api-key: ${{ env.HYBRID_ANALYSIS_API_KEY }}" \
            --header "User-Agent: Falcon Sandbox" \
            --header "Accept: application/json" \
            --form file=@WinMemoryCleaner.exe \
            --form environment_id=100)
          
          echo "$RESPONSE" > ha_submit_response.json

          SHA256=$(jq -e -r '.sha256' ha_submit_response.json)
          if [ -z "$SHA256" ] || [ "$SHA256" == "null" ]; then
            echo "::error::Failed to get sha256 from Hybrid Analysis response"
            cat ha_submit_response.json
            exit 1
          fi

          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "::notice::Submitted to Hybrid Analysis. SHA256: $SHA256"

      - name: Poll Hybrid Analysis for report
        run: |
          FILE_HASH=${{ steps.ha_submit.outputs.sha256 }}
          echo "::group::Polling Hybrid Analysis report status for SHA256: $FILE_HASH"
          
          sleep 45

          for i in {1..40}; do
            RESPONSE=$(curl --request GET --location --silent \
              --url "https://hybrid-analysis.com/api/v2/report/${FILE_HASH}" \
              --header "api-key: ${{ env.HYBRID_ANALYSIS_API_KEY }}" \
              --header "User-Agent: Falcon Sandbox" \
              --header "Accept: application/json")

            VERDICT=$(echo "$RESPONSE" | jq -r '.verdict')

            if [[ "$VERDICT" != "null" ]]; then
              echo "Analysis complete. Verdict: $VERDICT"
              echo "$RESPONSE" > ha_report.json
              break
            else
              STATE=$(echo "$RESPONSE" | jq -r '.state')
              echo "Attempt $i: Report not finalized. Current state: ${STATE:-'not available'}"
              sleep 30
            fi
          done

          if [ ! -f ha_report.json ]; then
            echo "::error::Report polling timed out or failed to complete."
            exit 1
          fi
          echo "::endgroup::"

      - name: Summarize Hybrid Analysis results
        run: |
          echo "::group::Hybrid Analysis summary"
          MALWARE_VERDICT=$(jq -r '.verdict // "N/A"' ha_report.json)
          THREAT_SCORE=$(jq -r '.threat_score // "N/A"' ha_report.json)
          AV_DETECTIONS=$(jq -r '.av_detect // "N/A"' ha_report.json)
          echo "Malware verdict: $MALWARE_VERDICT"
          echo "Threat Score: $THREAT_SCORE"
          echo "AV detections: $AV_DETECTIONS"
          echo "::endgroup::"

      - name: Cleanup
        if: always()
        run: |
          rm -f WinMemoryCleaner.exe ha_submit_response.json ha_report.json
          echo "::notice::Cleanup completed"
