name: Build, Tag, and Draft Release

# Trigger workflow on pushes to main and develop branches
on:
  push:
    branches:
      - main
      - develop
  # Enables manual trigger in Actions tab for testing or manual runs
  workflow_dispatch:

permissions:
  contents: write   # Needed to push tags and create releases
  pull-requests: read

jobs:
  build:
    runs-on: windows-latest
    env:
      CONFIGURATION: Release

    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      # Checkout the repo with full history (required to access tags)
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup MSBuild environment
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # Install .NET Framework 4.0 Developer Pack offline (required to build .NET Framework 4.0 projects)
      - name: Install .NET Framework 4.0 Developer Pack
        run: |
          # Silent install without restart
          .\ci\net-framework\4.0.exe /quiet /norestart

      # Bump the minor version tag automatically (e.g., 1.0 â†’ 1.1)
      - name: Bump minor version tag
        id: bump
        shell: pwsh
        run: |
          # Fetch all tags for version calculation
          git fetch --tags
          # Get tags matching x.y format sorted by creation date descending
          $tags = git tag --sort=-creatordate | Where-Object { $_ -match '^[0-9]+\.[0-9]+$' }
          if (-not $tags) {
            $newTag='1.0'
          } else {
            $parts = ($tags[0]).Split('.')
            $newTag = "{0}.{1}" -f $parts[0],([int]$parts[1]+1)
          }
          # Output new tag for later steps
          Write-Host "new_tag=$newTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # Debug step: list files in src folder to verify solution location (can be removed later)
      - name: List files in src folder
        run: dir src

      # Build the solution located in src folder with Release configuration and Any CPU platform
      - name: Build solution
        run: msbuild src\WinMemoryCleaner.sln /p:Configuration=Release /p:Platform="Any CPU"

      # Zip the executable only on the main branch (release builds)
      - name: Zip executable (release only)
        if: github.ref == 'refs/heads/main'
        run: Compress-Archive -Path src\bin\Release\WinMemoryCleaner.exe -DestinationPath WinMemoryCleaner.zip

      # Import code signing certificate only on main branch
      - name: Import signing certificate (release only)
        if: github.ref == 'refs/heads/main'
        run: |
          # Decode base64 encoded PFX from secret and save as cert.pfx
          echo "${{ secrets.SIGNING_CERT }}" | Out-File encoded.txt -Encoding ascii
          certutil -decode encoded.txt cert.pfx
          Remove-Item encoded.txt

      # Sign executable only on main branch
      - name: Sign executable (release only)
        if: github.ref == 'refs/heads/main'
        run: |
          & "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe" sign `
            /f cert.pfx `
            /p "${{ secrets.SIGNING_PASSWORD }}" `
            /tr http://timestamp.digicert.com `
            /td sha256 /fd sha256 `
            src\bin\Release\WinMemoryCleaner.exe

      # Cleanup the certificate file after signing
      - name: Cleanup certificate (release only)
        if: github.ref == 'refs/heads/main'
        run: Remove-Item cert.pfx

      # Create and push the new tag for both main and develop branches
      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}

      # Upload build artifacts
      # On main branch: upload both exe and zip
      # On develop branch: upload only exe, skip zip
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built
          path: |
            src\bin\Release\WinMemoryCleaner.exe
            # Conditionally include zip only on main branch
            ${{ github.ref == 'refs/heads/main' && 'WinMemoryCleaner.zip' || '' }}

  release:
    needs: build
    runs-on: windows-latest
    # Run release only on main branch (production release)
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      # Draft the GitHub release using Release Drafter with your config file
      - name: Draft Release using Release Drafter
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the release assets, mark release as draft and make it latest
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.new_tag }}
          files: |
            ./src/bin/Release/WinMemoryCleaner.exe
            ./WinMemoryCleaner.zip
          draft: true
          make_latest: true
