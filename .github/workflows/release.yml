name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build and Sign for Release
    runs-on: windows-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Bump version tag
        id: bump
        shell: pwsh
        run: |
          git fetch --tags
          $currentTag = git tag --sort=-creatordate | Where-Object { $_ -match '^\d+\.\d+\.\d+$' } | Select-Object -First 1
          if (-not $currentTag) {
            $major = 1; $minor = 0; $patch = 0
          } else {
            $parts = $currentTag.Split('.')
            $major = [int]$parts[0]
            $minor = [int]$parts[1]
            $patch = [int]$parts[2] + 1
          }
          $newTag = "$($major).$($minor).$($patch)"
          "new_tag=$newTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "New tag generated: $newTag"

      - name: Restore NuGet packages
        shell: pwsh
        run: nuget restore src\WinMemoryCleaner.sln

      - name: Build solution
        shell: pwsh
        run: msbuild src\WinMemoryCleaner.sln /m /p:Configuration=Release /p:Platform="Any CPU"

      - name: Upload EXE for signing
        id: upload-for-signing
        uses: actions/upload-artifact@v4
        with:
          name: winmemorycleaner-${{ steps.bump.outputs.new_tag }}
          path: src\bin\Release\WinMemoryCleaner.exe
          if-no-files-found: error

      - name: Submit to SignPath (release cert)
        if: github.repository == 'IgorMundstein/WinMemoryCleaner' && github.ref == 'refs/heads/main'
        id: signpath
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id: ${{ secrets.SIGNPATH_ORGANIZATION_ID }}
          project-slug: WinMemoryCleaner
          signing-policy-slug: release-signing
          github-artifact-id: ${{ steps.upload-for-signing.outputs.artifact-id }}
          wait-for-completion: true
          output-artifact-directory: ./

      - name: Capture window screenshot from SIGNED exe
        if: steps.signpath.conclusion == 'success'
        id: capture_screenshot
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $appPath = ".\WinMemoryCleaner.exe"
          if (-not (Test-Path $appPath)) {
            Write-Host "::error::Signed EXE not found at $appPath"
            exit 1
          }
          $windowScreenshotPath = "$pwd\main-window-raw.png"
          $proc = Start-Process -FilePath $appPath -PassThru
          $maxWaitMs = 15000; $elapsed = 0
          while ($proc.MainWindowHandle -eq 0 -and $elapsed -lt $maxWaitMs) {
            Start-Sleep -Milliseconds 200; $proc.Refresh(); $elapsed += 200
          }
          if ($proc.MainWindowHandle -eq 0) {
            Write-Host "::error::Main window not found for signed EXE."
            Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue
            exit 1
          }
          Add-Type -AssemblyName System.Drawing
          $sig = 'using System; using System.Runtime.InteropServices; public static class Win32 { [StructLayout(LayoutKind.Sequential)] public struct RECT { public int Left; public int Top; public int Right; public int Bottom; } [DllImport("user32.dll")] public static extern bool GetWindowRect(IntPtr hWnd, ref RECT rect); [DllImport("user32.dll")] public static extern bool SetForegroundWindow(IntPtr hWnd); }'
          Add-Type -TypeDefinition $sig -Language CSharp
          [void][Win32]::SetForegroundWindow([IntPtr]$proc.MainWindowHandle)
          $rect = New-Object Win32+RECT
          if (-not [Win32]::GetWindowRect([IntPtr]$proc.MainWindowHandle, [ref]$rect)) {
            Write-Host "::error::GetWindowRect failed."
            Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue; exit 1
          }
          $width = $rect.Right - $rect.Left; $height = $rect.Bottom - $rect.Top
          if ($width -le 0 -or $height -le 0) {
            Write-Host "::error::Invalid window size: $($width)x$($height)"
            Stop-Process -Id $proc.Id -Force -ErrorAction SilentlyContinue; exit 1
          }
          $wbmp = New-Object System.Drawing.Bitmap $width, $height
          $wgfx = [System.Drawing.Graphics]::FromImage($wbmp)
          $wgfx.CopyFromScreen($rect.Left, $rect.Top, 0, 0, (New-Object System.Drawing.Size($width, $height)))
          $wbmp.Save($windowScreenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
          $wgfx.Dispose(); $wbmp.Dispose()
          Stop-Process -Id $proc.Id -Force

      - name: Upload screenshot artifact
        if: steps.capture_screenshot.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: release-window-screenshot
          path: main-window-raw.png
          retention-days: 7

      - name: Create ZIP archive from SIGNED exe
        if: steps.signpath.conclusion == 'success'
        shell: pwsh
        run: Compress-Archive -Path WinMemoryCleaner.exe -DestinationPath WinMemoryCleaner.zip

      - name: Upload release artifacts
        if: steps.signpath.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: winmemorycleaner-release-${{ steps.bump.outputs.new_tag }}
          path: |
            WinMemoryCleaner.exe
            WinMemoryCleaner.zip
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: winmemorycleaner-release-${{ needs.build.outputs.new_tag }}
          path: release_artifacts
      - name: Create Checksums
        shell: pwsh
        working-directory: release_artifacts
        run: |
          Get-FileHash -Algorithm SHA256 -Path "WinMemoryCleaner.exe", "WinMemoryCleaner.zip" | ForEach-Object {
            $_.Hash.ToLower() + "  " + (Split-Path -Leaf $_.Path)
          } | Out-File -FilePath "checksums.txt" -Encoding utf8
          Write-Host "Generated checksums.txt:"; cat checksums.txt
      - name: Create or reuse version tag
        shell: pwsh
        run: |
          $tag = "${{ needs.build.outputs.new_tag }}"
          git fetch --tags
          if (-not (git tag -l $tag)) {
            git config user.name "github-actions"; git config user.email "github-actions@github.com"
            git tag $tag
            git push origin $tag
          } else {
            Write-Host "Tag '$tag' already exists. Reusing..."
          }
      - name: Check if release already exists
        id: check_release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tag = "${{ needs.build.outputs.new_tag }}"
          $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN" }
          $uri = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag"
          try {
            Invoke-RestMethod -Uri $uri -Headers $headers -Method GET
            Write-Host "Release already exists for tag $tag."
            "skip=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } catch {
            if ($_.Exception.Response.StatusCode.value__ -eq 404) {
              Write-Host "No release exists for tag $tag. Proceeding."
              "skip=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            } else {
              Write-Error "Unexpected error: $($_.Exception.Message)"; exit 1
            }
          }
      - name: Get commit date
        id: commit_date
        shell: pwsh
        run: |
          $date = (git show -s --format=%cd --date=short ${{ github.event.head_commit.id }}).Trim()
          "date=$date" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Format commit message for release notes
        id: formatted_message
        shell: pwsh
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          $msg = @()
          foreach ($line in $env:COMMIT_MESSAGE -split "`n") { $msg += "- $line" }
          $body = $msg -join "`n"
          "body<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "$body" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Upload GitHub release assets
        if: steps.check_release.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.new_tag }}
          name: ${{ needs.build.outputs.new_tag }}
          body: |
            **${{ steps.commit_date.outputs.date }}**
            ${{ steps.formatted_message.outputs.body }}
          files: |
            release_artifacts/WinMemoryCleaner.exe
            release_artifacts/WinMemoryCleaner.zip
            release_artifacts/checksums.txt
          draft: true
          generate_release_notes: false

  update-docs-image:
    name: Update docs/assets/images/main-window.png
    needs: build
    if: github.repository == 'IgorMundstein/WinMemoryCleaner' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository (with PAT)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure Git and pull latest
        shell: bash
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase

      - name: Download window-only screenshot
        id: download_screenshot
        uses: actions/download-artifact@v4
        with:
          name: release-window-screenshot
          path: ./ui-window
        continue-on-error: true

      - name: Check if screenshot exists
        id: check_screenshot
        if: steps.download_screenshot.outcome == 'success'
        shell: bash
        run: |
          if [ -f "./ui-window/main-window-raw.png" ]; then
            echo "Screenshot artifact found. Proceeding with image update."
            echo "screenshot_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::Screenshot artifact downloaded, but main-window-raw.png is missing. Skipping image update."
            echo "screenshot_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install ImageMagick
        if: steps.check_screenshot.outputs.screenshot_exists == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: Add transparent rounded corners and write image
        if: steps.check_screenshot.outputs.screenshot_exists == 'true'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/assets/images
          FILE="./ui-window/main-window-raw.png"
          read W H < <(identify -format "%w %h" "$FILE")
          if [ -z "${W:-}" ] || [ -z "${H:-}" ]; then echo "::error::Failed to read image size"; exit 1; fi
          if [ "$W" -lt "$H" ]; then MIN=$W; else MIN=$H; fi
          R=$(( MIN / 50 )); if [ "$R" -lt 10 ]; then R=10; fi; if [ "$R" -gt 24 ]; then R=24; fi
          magick "$FILE" \
            \( -size "${W}x${H}" xc:none -fill white -draw "roundrectangle 0,0,$((W-1)),$((H-1)),$R,$R" \) \
            -compose DstIn -composite \
            docs/assets/images/main-window.png

      - name: Create Pull Request for Updated Screenshot
        id: cpr
        if: steps.check_screenshot.outputs.screenshot_exists == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "chore(docs): update main-window.png"
          title: "Docs: Update screenshot for v${{ needs.build.outputs.new_tag }}"
          body: |
            This is an automated PR to update the main window screenshot.
            It will be automatically merged once all status checks pass.
          branch: "docs/screenshot-update-${{ needs.build.outputs.new_tag }}"
          base: main
          delete-branch: true
          add-paths: |
            docs/assets/images/main-window.png

      - name: Enable Auto-Merge for the PR
        if: steps.check_screenshot.outputs.screenshot_exists == 'true' && steps.cpr.outputs.pull-request-number != ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          REPO: ${{ github.repository }}
        run: gh pr merge $PR_NUMBER --repo $REPO --squash --auto --delete-branch
