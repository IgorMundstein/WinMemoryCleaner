name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    name: Build and Sign for Release
    runs-on: windows-latest
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref_name }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Bump version tag
        id: bump
        shell: pwsh
        run: |
          git fetch --tags
          $currentTag = git tag --sort=-creatordate | Where-Object { $_ -match '^\d+\.\d+\.\d+$' } | Select-Object -First 1
          if (-not $currentTag) {
            $major = 1
            $minor = 0
            $patch = 0
          } else {
            $parts = $currentTag.Split('.')
            $major = [int]$parts[0]
            $minor = [int]$parts[1]
            $patch = [int]$parts[2] + 1
          }
          $newTag = "$($major).$($minor).$($patch)"
          "new_tag=$newTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "New tag generated: $newTag"

      - name: Restore NuGet packages
        shell: pwsh
        run: nuget restore src\WinMemoryCleaner.sln

      - name: Build solution
        shell: pwsh
        run: msbuild src\WinMemoryCleaner.sln /m /p:Configuration=Release /p:Platform="Any CPU"

      - name: Upload unsigned EXE for signing
        id: upload-unsigned
        uses: actions/upload-artifact@v4
        with:
          name: winmemorycleaner-${{ steps.bump.outputs.new_tag }}
          path: src\bin\Release\WinMemoryCleaner.exe
          if-no-files-found: error

      - name: Submit to SignPath (release cert)
        if: github.repository == 'IgorMundstein/WinMemoryCleaner' && github.ref == 'refs/heads/main'
        id: signpath
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: ${{ secrets.SIGNPATH_API_TOKEN }}
          organization-id: ${{ secrets.SIGNPATH_ORGANIZATION_ID }}
          project-slug: WinMemoryCleaner
          signing-policy-slug: release-signing
          github-artifact-id: ${{ steps.upload-unsigned.outputs.artifact-id }}
          wait-for-completion: true
          output-artifact-directory: ./

      - name: Validate signed EXE
        if: github.repository == 'IgorMundstein/WinMemoryCleaner' && github.ref == 'refs/heads/main'
        shell: pwsh
        run: |
          if ((Get-Item WinMemoryCleaner.exe).Length -lt 100000) {
            Write-Host "::error::Signed EXE is unexpectedly small, aborting release!"
            exit 1
          }

      - name: Create ZIP archive
        if: github.repository == 'IgorMundstein/WinMemoryCleaner' && github.ref == 'refs/heads/main'
        shell: pwsh
        run: Compress-Archive -Path WinMemoryCleaner.exe -DestinationPath WinMemoryCleaner.zip

      - name: Upload release artifacts
        if: github.repository == 'IgorMundstein/WinMemoryCleaner' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: winmemorycleaner-release-${{ steps.bump.outputs.new_tag }}
          path: |
            WinMemoryCleaner.exe
            WinMemoryCleaner.zip
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: winmemorycleaner-release-${{ needs.build.outputs.new_tag }}
          path: release_artifacts

      - name: Create Checksums
        shell: pwsh
        working-directory: release_artifacts
        run: |
          Get-FileHash -Algorithm SHA256 -Path "WinMemoryCleaner.exe", "WinMemoryCleaner.zip" | ForEach-Object {
            $_.Hash.ToLower() + "  " + (Split-Path -Leaf $_.Path)
          } | Out-File -FilePath "checksums.txt" -Encoding utf8
          Write-Host "Generated checksums.txt:"
          cat checksums.txt

      - name: Create or reuse version tag
        shell: pwsh
        run: |
          $tag = "${{ needs.build.outputs.new_tag }}"
          git fetch --tags
          $tagExists = git tag -l $tag
          if (-not $tagExists) {
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag $tag
            git push origin $tag
          } else {
            Write-Host "Tag '$tag' already exists. Reusing..."
          }

      - name: Check if release already exists
        id: check_release
        shell: pwsh
        run: |
          $tag = "${{ needs.build.outputs.new_tag }}"
          $headers = @{ Authorization = "Bearer $env:GITHUB_TOKEN" }
          $uri = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag"
          try {
            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method GET
            Write-Host "Release already exists for tag $tag."
            "skip=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } catch {
            if ($_.Exception.Response.StatusCode.value__ -eq 404) {
              Write-Host "No release exists for tag $tag. Proceeding."
              "skip=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            } else {
              Write-Error "Unexpected error: $($_.Exception.Message)"
              exit 1
            }
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get commit date
        id: commit_date
        shell: pwsh
        run: |
          $date = (git show -s --format=%cd --date=short ${{ github.event.head_commit.id }}).Trim()
          echo "date=$date" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Format commit message for release notes
        id: formatted_message
        shell: pwsh
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          $msg = @()
          foreach ($line in $env:COMMIT_MESSAGE -split "`n") {
            $msg += "- $line"
          }
          $body = $msg -join "`n"
          echo "body<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "$body" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload GitHub release assets
        if: steps.check_release.outputs.skip == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.new_tag }}
          name: ${{ needs.build.outputs.new_tag }}
          body: |
            # ${{ steps.commit_date.outputs.date }}
            ${{ steps.formatted_message.outputs.body }}
          files: |
            release_artifacts/WinMemoryCleaner.exe
            release_artifacts/WinMemoryCleaner.zip
            release_artifacts/checksums.txt
          draft: true
          generate_release_notes: false
