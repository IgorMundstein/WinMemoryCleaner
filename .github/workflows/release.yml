name: Build, Tag, and Draft Release

# Trigger workflow on push to main or develop, and allow manual trigger from UI
on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:  # Enables manual trigger in Actions tab

permissions:
  contents: write   # Needed for pushing tags and creating releases
  pull-requests: read

jobs:
  build:
    runs-on: windows-latest
    env:
      CONFIGURATION: Release

    # Pass new_tag output to next jobs
    outputs:
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      # Checkout the repo with full history, needed for tags
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup MSBuild environment to build the solution
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      # Automatically bump minor version tag based on existing tags like 1.0, 1.1, etc.
      - name: Bump minor version tag
        id: bump
        shell: pwsh
        run: |
          git fetch --tags
          # Get tags matching x.y format sorted by creation date descending
          $tags = git tag --sort=-creatordate | Where-Object { $_ -match '^[0-9]+\.[0-9]+$' }
          if (-not $tags) {
            $newTag='1.0'
          } else {
            $parts = ($tags[0]).Split('.')
            $newTag = "{0}.{1}" -f $parts[0],([int]$parts[1]+1)
          }
          # Set the output for next steps
          Write-Host "new_tag=$newTag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # Debug: List files in src folder to confirm location of solution file
      - name: List files in src folder
        run: dir src

      # Build the solution file with Release config and Any CPU platform
      - name: Build solution
        run: msbuild src\WinMemoryCleaner.sln /p:Configuration=Release /p:Platform="Any CPU"

      # Zip the executable only on main branch (release builds)
      - name: Zip executable (release only)
        if: github.ref == 'refs/heads/main'
        run: Compress-Archive -Path src\bin\Release\WinMemoryCleaner.exe -DestinationPath WinMemoryCleaner.zip

      # Import the signing certificate only on main branch (release)
      - name: Import signing certificate (release only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.SIGNING_CERT }}" | Out-File encoded.txt -Encoding ascii
          certutil -decode encoded.txt cert.pfx
          Remove-Item encoded.txt

      # Sign the executable only on main branch (release)
      - name: Sign executable (release only)
        if: github.ref == 'refs/heads/main'
        run: |
          & "${env:ProgramFiles(x86)}\Windows Kits\10\bin\x64\signtool.exe" sign `
            /f cert.pfx `
            /p "${{ secrets.SIGNING_PASSWORD }}" `
            /tr http://timestamp.digicert.com `
            /td sha256 /fd sha256 `
            src\bin\Release\WinMemoryCleaner.exe

      # Cleanup the certificate after signing to avoid leakage
      - name: Cleanup certificate (release only)
        if: github.ref == 'refs/heads/main'
        run: Remove-Item cert.pfx

      # Create and push the new tag (for both main and develop branches)
      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@githu
