name: Submit to Chocolatey

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      force_resubmit:
        description: "Force re-submit of the latest release version (for moderation fixes)."
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  submit-to-chocolatey:
    name: Submit to Chocolatey Community
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release info
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const full_tag = release.tag_name;
            const version_tag = full_tag.startsWith('v') ? full_tag.substring(1) : full_tag;
            const asset = release.assets.find(a => a.name.toLowerCase().endsWith('.exe'));
            if (!asset) {
              core.setFailed('Could not find .exe asset in the latest release.');
              return;
            }
            core.setOutput('full_tag', full_tag);
            core.setOutput('version_tag', version_tag);
            core.setOutput('asset_url', asset.browser_download_url);
            core.setOutput('asset_name', asset.name);

      - name: Set Environment
        shell: pwsh
        run: |
          echo "CHOCO_VERSION=${{ steps.get_release.outputs.version_tag }}" >> $env:GITHUB_ENV
          echo "RELEASE_TAG=${{ steps.get_release.outputs.full_tag }}" >> $env:GITHUB_ENV
          echo "ASSET_URL=${{ steps.get_release.outputs.asset_url }}" >> $env:GITHUB_ENV
          echo "ASSET_NAME=${{ steps.get_release.outputs.asset_name }}" >> $env:GITHUB_ENV
          echo "CHOCO_FORCE_RESUBMIT=${{ inputs.force_resubmit }}" >> $env:GITHUB_ENV

      - name: Validate inputs and environment
        shell: pwsh
        run: |
          if (-not ("${{ secrets.CHOCO_DATEY_API_KEY }}")) {
            Write-Host "::error::CHOCOLATEY_API_KEY secret is not set in the repository settings!"
            exit 1
          }
          if (-not ($env:CHOCO_VERSION -match "^\d+\.\d+\.\d+$")) {
            Write-Host "::error::Version format must be Major.Minor.Patch (e.g., 1.0.0). Found: $($env:CHOCO_VERSION)"
            exit 1
          }

      - name: Check if version already exists on Chocolatey (skip if force)
        id: check_chocolatey
        shell: pwsh
        run: |
          if ($env:CHOCO_FORCE_RESUBMIT -eq 'true') {
            Write-Host "::notice::Force resubmission enabled; skipping existing-version check."
            echo "skip=false" >> $env:GITHUB_OUTPUT
            return
          }
          $packageName = 'winmemorycleaner'
          $apiUrl = "https://community.chocolatey.org/api/v2/Packages()?`$filter=Id%20eq%20'$($packageName)'"
          try {
            $response = @(Invoke-RestMethod -Uri $apiUrl -Method Get -ErrorAction Stop)
            if ($response.Count -gt 0 -and $response[0].entry) {
                $existingVersions = $response[0].entry.properties.Version.'#text'
                if ($existingVersions -contains $env:CHOCO_VERSION) {
                  Write-Host "::notice::Version $($env:CHOCO_VERSION) already exists on Chocolatey. Skipping submission."
                  echo "skip=true" >> $env:GITHUB_OUTPUT
                } else {
                  echo "skip=false" >> $env:GITHUB_OUTPUT
                }
            } else {
              echo "skip=false" >> $env:GITHUB_OUTPUT
            }
          } catch {
            Write-Host "::warning::Version check failed; proceeding."
            echo "skip=false" >> $env:GITHUB_OUTPUT
          }

      - name: Download release asset
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          Write-Host "Downloading ${{ env.ASSET_NAME }} from ${{ env.
