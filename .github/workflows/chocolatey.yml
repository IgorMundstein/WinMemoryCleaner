name: Submit to Chocolatey

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  submit-to-chocolatey:
    name: Submit to Chocolatey Community
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release info
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const full_tag = release.tag_name;
            const version_tag = full_tag.startsWith('v') ? full_tag.substring(1) : full_tag;
            core.setOutput('full_tag', full_tag);
            core.setOutput('version_tag', version_tag);

      - name: Set Release Version Environment Variables
        shell: pwsh
        run: |
          echo "CHOCO_VERSION=${{ steps.get_release.outputs.version_tag }}" >> $env:GITHUB_ENV
          echo "RELEASE_TAG=${{ steps.get_release.outputs.full_tag }}" >> $env:GITHUB_ENV

      - name: Validate inputs and environment
        shell: pwsh
        run: |
          if (-not ("${{ secrets.CHOCOLATEY_API_KEY }}")) {
            Write-Host "::error::CHOCOLATEY_API_KEY secret is not set in the repository settings!"
            exit 1
          }
          if (-not ($env:CHOCO_VERSION -match "^\d+\.\d+\.\d+$")) {
            Write-Host "::error::Version format must be Major.Minor.Patch (e.g., 1.0.0). Found: $($env:CHOCO_VERSION)"
            exit 1
          }

      - name: Check if version already exists on Chocolatey
        id: check_chocolatey
        shell: pwsh
        run: |
          $packageName = 'winmemorycleaner'
          $apiUrl = "https://community.chocolatey.org/api/v2/Packages()?`$filter=Id%20eq%20'$($packageName)'"
          try {
            $response = Invoke-RestMethod -Uri $apiUrl -Method Get -ErrorAction SilentlyContinue
            $existingVersions = $response.entry.properties.Version | ForEach-Object { $_.'#text' }
            if ($existingVersions -contains $env:CHOCO_VERSION) {
              Write-Host "::notice::Version $($env:CHOCO_VERSION) already exists on Chocolatey. Skipping submission."
              echo "skip=true" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "::notice::Version $($env:CHOCO_VERSION) not found on Chocolatey. Proceeding."
              echo "skip=false" >> $env:GITHUB_OUTPUT
            }
          }
          catch {
            Write-Host "::warning::Could not check for existing versions. Proceeding with submission."
            echo "skip=false" >> $env:GITHUB_OUTPUT
          }

      - name: Download release asset and calculate checksum
        if: steps.check_chocolatey.outputs.skip == 'false'
        id: download
        shell: pwsh
        run: |
          $assetName = "WinMemoryCleaner.exe"
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/${{ steps.get_release.outputs.full_tag }}/$assetName"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $assetName -UseBasicParsing
          if (!(Test-Path $assetName) -or (Get-Item $assetName).Length -lt 10000) {
            Write-Host "::error::Downloaded file is missing or too small."
            exit 1
          }
          $sha256 = (Get-FileHash -Path $assetName -Algorithm SHA256).Hash.ToLower()
          echo "SHA256=$sha256" >> $env:GITHUB_ENV

      - name: Fetch repository metadata
        if: steps.check_chocolatey.outputs.skip == 'false'
        id: metadata
        uses: actions/github-script@v7
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('desc', repo.description?.trim() || 'A utility to clean system memory.');
            core.setOutput('homepage', repo.homepage || repo.html_url);
            core.setOutput('tags', repo.topics.join(' ') || 'ram memory foss cleaner memory-management memory-optimization windows-optimization-tool admin');

      - name: Generate Chocolatey package files
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          $packageDir = ".\chocolatey-package"
          New-Item -ItemType Directory -Path $packageDir -Force
          $toolsDir = Join-Path $packageDir "tools"
          New-Item -ItemType Directory -Path $toolsDir -Force

          $nuspecContent = @"
          <?xml version='1.0' encoding='utf-8'?>
          <package xmlns='http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd'>
            <metadata>
              <id>winmemorycleaner</id>
              <version>${env:CHOCO_VERSION}</version>
              <owners>Igor Mundstein</owners>
              <title>Windows Memory Cleaner</title>
              <authors>Igor Mundstein</authors>
              <projectUrl>${{ steps.metadata.outputs.homepage }}</projectUrl>
              <packageSourceUrl>https://github.com/${{ github.repository }}</packageSourceUrl>
              <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/${env:RELEASE_TAG}</releaseNotes>
              <licenseUrl>https://github.com/${{ github.repository }}/blob/main/LICENSE</licenseUrl>
              <bugTrackerUrl>https://github.com/${{ github.repository }}/issues</bugTrackerUrl>
              <tags>${{ steps.metadata.outputs.tags }}</tags>
              <summary>${{ steps.metadata.outputs.desc }}</summary>
              <description>${{ steps.metadata.outputs.desc }}</description>
            </metadata>
            <files>
              <file src='tools\**' target='tools' />
            </files>
          </package>
          "@
          Set-Content -Path (Join-Path $packageDir "winmemorycleaner.nuspec") -Value $nuspecContent -Encoding UTF8

          $installScriptContent = @"
          `$ErrorActionPreference = 'Stop'
          `$packageArgs = @{
            packageName    = 'winmemorycleaner'
            fileType       = 'EXE'
            url64bit       = 'https://github.com/${{ github.repository }}/releases/download/${env:RELEASE_TAG}/WinMemoryCleaner.exe'
            checksum64     = '${env:SHA256}'
            checksumType64 = 'sha256'
            silentArgs     = '/Package'
            validExitCodes = @(0)
          }
          Install-ChocolateyInstallPackage @`$packageArgs
          "@
          Set-Content -Path (Join-Path $toolsDir "chocolateyinstall.ps1") -Value $installScriptContent -Encoding UTF8

          $uninstallScriptContent = @"
          `$ErrorActionPreference = 'Stop'
          `$installDir = Join-Path `$"env:ProgramFiles" "WinMemoryCleaner"
          `$exePath = Join-Path `$installDir "WinMemoryCleaner.exe"

          if (Test-Path `$exePath) {
            Start-Process -FilePath `$exePath -ArgumentList "/Uninstall" -Wait
          }

          Remove-Item -Path `$installDir -Recurse -Force -ErrorAction SilentlyContinue
          "@
          Set-Content -Path (Join-Path $toolsDir "chocolateyuninstall.ps1") -Value $uninstallScriptContent -Encoding UTF8

      - name: Lint and quality check nuspec
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          [xml]$nuspec = Get-Content .\chocolatey-package\winmemorycleaner.nuspec
          $errors = @()
          $meta = $nuspec.package.metadata
          if (-not $meta.version -or $meta.version -notmatch '^\d+\.\d+\.\d+$') {
            $errors += "Version must be present and follow semantic versioning (e.g., 1.2.3)."
          }
          if (-not $meta.description -or $meta.description.Length -lt 10) {
            $errors += "Description must be at least 10 characters."
          }
          if (-not $meta.projectUrl) {
            $errors += "projectUrl must be present."
          }
          if (-not $meta.licenseUrl) {
            $errors += "licenseUrl must be present."
          }
          if (-not $meta.owners) {
            $errors += "owners must be present."
          }
          if ($errors.Count -gt 0) {
            Write-Host "::error::Nuspec quality check failed:`n$($errors -join "`n")"
            exit 1
          }

      - name: Build and Push Chocolatey package
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          cd .\chocolatey-package
          choco pack
          $nupkgFile = Get-ChildItem -Filter "*.nupkg" | Select-Object -First 1
          if (-not $nupkgFile) {
            Write-Host "::error::No .nupkg file was created by 'choco pack'."
            exit 1
          }
          choco push $nupkgFile.FullName --source https://push.chocolatey.org/ --api-key "${{ secrets.CHOCOLATEY_API_KEY }}" --force
          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::Failed to push package to Chocolatey."
            exit 1
          }

      - name: Cleanup
        if: always()
        shell: pwsh
        run: |
          Remove-Item -Path ".\WinMemoryCleaner.exe" -ErrorAction SilentlyContinue
          Remove-Item -Path ".\chocolatey-package" -Recurse -Force -ErrorAction SilentlyContinue
