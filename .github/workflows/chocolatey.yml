name: Submit to Chocolatey

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  submit-chocolatey:
    name: Submit to Chocolatey Community
    runs-on: windows-latest
    timeout-minutes: 30
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Get latest release info
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const full_tag = release.tag_name;
            const version_tag = full_tag.startsWith('v') ? full_tag.substring(1) : full_tag;
            core.setOutput('full_tag', full_tag);
            core.setOutput('version_tag', version_tag);

      - name: Set Release Version Environment Variables
        shell: pwsh
        run: |
          echo "CHOCO_VERSION=${{ steps.get_release.outputs.version_tag }}" >> $env:GITHUB_ENV
          echo "RELEASE_TAG=${{ steps.get_release.outputs.full_tag }}" >> $env:GITHUB_ENV

      - name: Validate inputs and environment
        shell: pwsh
        run: |
          if (-not ("${{ secrets.CHOCOLATEY_API_KEY }}")) {
            Write-Host "::error::CHOCOLATEY_API_KEY secret is not set!"
            exit 1
          }
          if (-not ("$env:CHOCO_VERSION" -match "^[0-9]+\.[0-9]+\.[0-9]+$")) {
            Write-Host "::error::Version format must be Major.Minor.Patch (e.g., 1.0.0). Found: $env:CHOCO_VERSION"
            exit 1
          }

      - name: Check if version already exists on Chocolatey
        id: check_chocolatey
        shell: pwsh
        run: |
          try {
            $response = Invoke-RestMethod -Uri "https://community.chocolatey.org/api/v2/Packages()?`$filter=Id%20eq%20'winmemorycleaner'" -Method Get
            $existingVersions = $response.entry.properties.Version.'#text'
            if ($existingVersions -contains "$env:CHOCO_VERSION") {
              Write-Host "::notice::Version $env:CHOCO_VERSION already exists on Chocolatey. Skipping submission."
              echo "skip=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            } else {
              Write-Host "::notice::Version $env:CHOCO_VERSION not found, proceeding with submission."
              echo "skip=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }
          }
          catch {
            Write-Host "::notice::Could not check existing versions, proceeding with submission just in case."
            echo "skip=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Verify release assets
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          $releaseUrl = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$env:RELEASE_TAG"
          try {
            $release = Invoke-RestMethod -Uri $releaseUrl -Method Get
            $assets = $release.assets | Where-Object { $_.name -eq "WinMemoryCleaner.exe" }
            if (-not $assets) {
              Write-Host "::error::WinMemoryCleaner.exe not found in release assets"
              exit 1
            }
          }
          catch {
            Write-Host "::error::Release $env:RELEASE_TAG not found"
            exit 1
          }

      - name: Download and verify release asset
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/$env:RELEASE_TAG/WinMemoryCleaner.exe"
          $outputFile = "WinMemoryCleaner.exe"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $outputFile -UseBasicParsing
          if (!(Test-Path $outputFile) -or (Get-Item $outputFile).Length -lt 10000) {
            Write-Host "::error::Downloaded file is missing or too small."
            exit 1
          }

      - name: Calculate and verify SHA256
        if: steps.check_chocolatey.outputs.skip == 'false'
        id: sha
        shell: pwsh
        run: |
          $hash = Get-FileHash -Path "WinMemoryCleaner.exe" -Algorithm SHA256
          $sha256 = $hash.Hash.ToLower()
          echo "SHA256=$sha256" >> $env:GITHUB_ENV
          echo "sha256=$sha256" >> $env:GITHUB_OUTPUT

      - name: Fetch repository metadata
        if: steps.check_chocolatey.outputs.skip == 'false'
        id: metadata
        uses: actions/github-script@v7
        with:
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('desc', repo.description?.trim() || 'No description found.');
            core.setOutput('homepage', repo.homepage || repo.html_url);

      - name: Set up Chocolatey
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        continue-on-error: true
        run: |
          try {
            choco upgrade chocolatey -y --no-progress
          } catch {
            Write-Host "Could not upgrade Chocolatey. This is common on hosted runners and can be ignored. Continuing..."
          }
          echo "C:\ProgramData\Chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          exit 0

      - name: Generate Chocolatey package files
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          $packageDir = "chocolatey-package"
          New-Item -ItemType Directory -Path $packageDir -Force
          $toolsDir = Join-Path $packageDir "tools"
          New-Item -ItemType Directory -Path $toolsDir -Force

          $nuspecContent = @"
<?xml version='1.0' encoding='utf-8'?>
<package xmlns='http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd'>
  <metadata>
    <id>winmemorycleaner</id>
    <version>$env:CHOCO_VERSION</version>
    <owners>Igor Mundstein</owners>
    <title>Windows Memory Cleaner</title>
    <authors>Igor Mundstein</authors>
    <projectUrl>${{ steps.metadata.outputs.homepage }}</projectUrl>
    <packageSourceUrl>https://github.com/${{ github.repository }}</packageSourceUrl>
    <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/$env:RELEASE_TAG</releaseNotes>
    <licenseUrl>https://github.com/${{ github.repository }}/blob/main/LICENSE</licenseUrl>
    <bugTrackerUrl>https://github.com/${{ github.repository }}/issues</bugTrackerUrl>
    <tags>memory cleaner ram optimization windows portable</tags>
    <summary>${{ steps.metadata.outputs.desc }}</summary>
    <description>${{ steps.metadata.outputs.desc }}</description>
  </metadata>
  <files>
    <file src='tools\**' target='tools' />
  </files>
</package>
"@
          $nuspecContent | Out-File -FilePath (Join-Path $packageDir "winmemorycleaner.nuspec") -Encoding UTF8

          $installScript = @"
`$ErrorActionPreference = 'Stop'
`$toolsDir = "`$(Split-Path -parent `$MyInvocation.MyCommand.Definition)"
`$packageArgs = @{
  packageName    = 'winmemorycleaner'
  fileType       = 'EXE'
  url64bit       = 'https://github.com/${{ github.repository }}/releases/download/$env:RELEASE_TAG/WinMemoryCleaner.exe'
  checksum64     = '$env:SHA256'
  checksumType64 = 'sha256'
}
Install-ChocolateyPackage @packageArgs
"@
          $installScript | Out-File -FilePath (Join-Path $toolsDir "chocolateyinstall.ps1") -Encoding UTF8

          $uninstallScript = @"
`$ErrorActionPreference = 'Continue'
Uninstall-ChocolateyPackage 'winmemorycleaner'
"@
          $uninstallScript | Out-File -FilePath (Join-Path $toolsDir "chocolateyuninstall.ps1") -Encoding UTF8

      - name: Build and Push Chocolatey package
        if: steps.check_chocolatey.outputs.skip == 'false'
        shell: pwsh
        run: |
          cd chocolatey-package
          choco pack
          $nupkgFile = Get-ChildItem -Filter "*.nupkg" | Select-Object -First 1
          if (-not $nupkgFile) {
            Write-Host "::error::No .nupkg file was created"
            exit 1
          }
          choco apikey --key "${{ secrets.CHOCOLATEY_API_KEY }}" --source https://push.chocolatey.org/
          choco push $nupkgFile.FullName --source https://push.chocolatey.org/
          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::Failed to push package to Chocolatey"
            exit 1
          }
          Write-Host "::notice::Package successfully submitted."

      - name: Cleanup
        if: always()
        shell: pwsh
        run: |
          Remove-Item -Path "WinMemoryCleaner.exe" -ErrorAction SilentlyContinue
          Remove-Item -Path "chocolatey-package" -Recurse -ErrorAction SilentlyContinue
          Write-Host "::notice::Cleanup completed"
