name: Verify Packages Publication Statuses

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_version: ${{ steps.get_version.outputs.RELEASE_VERSION }}
      cache-hit: ${{ steps.cache_check.outputs.cache-hit }}
      cache-key: ${{ steps.cache_check.outputs.cache-primary-key }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Version
        id: get_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_tag=$(gh release view --json tagName --jq .tagName)
          if [ -z "$latest_tag" ]; then
            echo "‚ùå No releases found in this repository. Halting workflow."
            exit 1
          fi
          version=$(echo "$latest_tag" | sed 's/v//')
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "Checking version $version"

      - name: Check if Already Verified via Cache
        id: cache_check
        uses: actions/cache/restore@v4
        with:
          path: ./.cache
          key: verification-flag-${{ steps.get_version.outputs.RELEASE_VERSION }}

  verify-chocolatey:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: Verify on Chocolatey üç´
        run: |
          $version_to_check = "${{ needs.setup.outputs.release_version }}"
          $choco_output = choco search winmemorycleaner --exact --all-versions -r
          if ($choco_output -match "$version_to_check") {
            echo "‚úÖ Success! Version $version_to_check found on Chocolatey."
          } else {
            echo "‚ùå Failure! Version $version_to_check not found on Chocolatey."
            exit 1
          }
        shell: powershell

  verify-scoop:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: Verify on Scoop üç¶
        run: |
          $version_to_check = "${{ needs.setup.outputs.release_version }}"
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
          irm get.scoop.sh | iex
          $scoop_output = ""
          try { $scoop_output = scoop info winmemorycleaner -ErrorAction Stop } catch {}

          if ($scoop_output -match "Version:\s*$version_to_check") {
            echo "‚úÖ Success! Version $version_to_check found on Scoop."
          } else {
            echo "‚ùå Failure! Version $version_to_check not found on Scoop."
            exit 1
          }
        shell: powershell

  verify-winget:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: Verify on WinGet üì¶
        run: |
          $version_to_check = "${{ needs.setup.outputs.release_version }}"
          $env:PATH += ";${env:LOCALAPPDATA}\Microsoft\WindowsApps"
          $winget_output = ""
          try { $winget_output = winget show --id "IgorMundstein.WinMemoryCleaner" --source winget --accept-source-agreements -ErrorAction Stop } catch {}
          
          if ($winget_output -match "Version:\s*$version_to_check") {
            echo "‚úÖ Success! Version $version_to_check found on WinGet."
          } else {
            echo "‚ùå Failure! Version $version_to_check not found on WinGet."
            exit 1
          }
        shell: powershell

  summarize:
    runs-on: ubuntu-latest
    needs: [setup, verify-chocolatey, verify-scoop, verify-winget]
    if: always()
    steps:
      - name: Report Final Status
        run: |
          if [ "${{ needs.setup.outputs.cache-hit }}" == "true" ]; then
            echo "‚úÖ Version ${{ needs.setup.outputs.release_version }} is already verified (cache hit)."
            exit 0
          fi
          
          get_icon() {
            if [ "$1" == "success" ]; then
              echo "‚úÖ"
            else
              echo "‚ùå"
            fi
          }

          choco_outcome="${{ needs.verify-chocolatey.result }}"
          scoop_outcome="${{ needs.verify-scoop.result }}"
          winget_outcome="${{ needs.verify-winget.result }}"

          echo "---"
          echo "Verification Results:"
          echo "$(get_icon "$choco_outcome") Chocolatey"
          echo "$(get_icon "$scoop_outcome") Scoop"
          echo "$(get_icon "$winget_outcome") WinGet"
          echo "---"

          if [[ "$choco_outcome" == "success" && "$scoop_outcome" == "success" && "$winget_outcome" == "success" ]]; then
            echo "All packages successfully verified."
          else
            echo "One or more package verification checks failed."
          fi

      - name: Save Success Flag to Cache
        if: needs.setup.outputs.cache-hit != 'true' && needs.verify-chocolatey.result == 'success' && needs.verify-scoop.result == 'success' && needs.verify-winget.result == 'success'
        uses: actions/cache/save@v4
        with:
          path: ./.cache
          key: ${{ needs.setup.outputs.cache-key }}
