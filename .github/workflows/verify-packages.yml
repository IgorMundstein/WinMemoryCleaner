name: Verify Packages Publication Statuses

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_version: ${{ steps.get_version.outputs.RELEASE_VERSION }}
      cache-hit: ${{ steps.cache_check.outputs.cache-hit }}
      cache-key: ${{ steps.cache_check.outputs.cache-primary-key }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Version
        id: get_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_tag=$(gh release view --json tagName --jq .tagName)
          if [ -z "$latest_tag" ]; then
            echo "‚ùå No releases found in this repository. Halting workflow."
            exit 1
          fi
          version=$(echo "$latest_tag" | sed 's/v//')
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "Checking version $version"

      - name: Check if Already Verified via Cache
        id: cache_check
        uses: actions/cache/restore@v4
        with:
          path: ./.cache
          key: verification-flag-${{ steps.get_version.outputs.RELEASE_VERSION }}

  verify-chocolatey:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: Verify on Chocolatey üç´
        run: |
          echo "Checking for version ${{ needs.setup.outputs.release_version }} on Chocolatey..."
          $choco_output = choco search winmemorycleaner --exact --all-versions -r
          if ($choco_output -match "${{ needs.setup.outputs.release_version }}") {
            echo "‚úÖ Success! Version ${{ needs.setup.outputs.release_version }} found on Chocolatey."
          } else {
            echo "‚ùå Failure! Version not found on Chocolatey."
            exit 1
          }
        shell: powershell

  verify-winget:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: Verify on WinGet üì¶
        run: |
          echo "Checking for version ${{ needs.setup.outputs.release_version }} on WinGet..."
          $packageId = "IgorMundstein.WinMemoryCleaner"
          $winget_info = winget show --id $packageId --source winget --accept-source-agreements
          $winget_version = ($winget_info | Select-String 'Version:').ToString().Split(':')[-1].Trim()
          echo "Version found on WinGet: $winget_version"
          if ($winget_version -eq "${{ needs.setup.outputs.release_version }}") {
            echo "‚úÖ Success! Version ${{ needs.setup.outputs.release_version }} found on WinGet."
          } else {
            echo "‚ùå Failure! Version mismatch on WinGet."
            exit 1
          }
        shell: powershell

  verify-scoop:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: Verify on Scoop üç¶
        run: |
          echo "Checking for version ${{ needs.setup.outputs.release_version }} on Scoop..."
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
          irm get.scoop.sh | iex
          $scoop_info = scoop info winmemorycleaner
          if (-not $scoop_info) {
            echo "‚ùå Failure! Scoop could not find a manifest for winmemorycleaner."
            exit 1
          }
          $scoop_version = ($scoop_info | Select-String 'Version:').ToString().Split(' ')[-1]
          echo "Version found on Scoop: $scoop_version"
          if ($scoop_version -eq "${{ needs.setup.outputs.release_version }}") {
            echo "‚úÖ Success! Version ${{ needs.setup.outputs.release_version }} found on Scoop."
          } else {
            echo "‚ùå Failure! Version mismatch on Scoop."
            exit 1
          }
        shell: powershell

  summarize:
    runs-on: ubuntu-latest
    needs: [setup, verify-chocolatey, verify-winget, verify-scoop]
    if: always()
    steps:
      - name: Report Final Status
        run: |
          if [ "${{ needs.setup.outputs.cache-hit }}" == "true" ]; then
            echo "‚úÖ Version ${{ needs.setup.outputs.release_version }} is already verified (cache hit). Halting workflow."
            exit 0
          fi
          
          choco_outcome="${{ needs.verify-chocolatey.result }}"
          winget_outcome="${{ needs.verify-winget.result }}"
          scoop_outcome="${{ needs.verify-scoop.result }}"

          echo "---"
          echo "Verification Results:"
          echo "Chocolatey: $choco_outcome"
          echo "WinGet: $winget_outcome"
          echo "Scoop: $scoop_outcome"
          echo "---"

          if [[ "$choco_outcome" == "success" && "$winget_outcome" == "success" && "$scoop_outcome" == "success" ]]; then
            echo "All packages successfully verified."
          else
            echo "One or more package verification checks failed."
            exit 1
          fi

      - name: Save Success Flag to Cache
        if: needs.setup.outputs.cache-hit != 'true' && needs.verify-chocolatey.result == 'success' && needs.verify-winget.result == 'success' && needs.verify-scoop.result == 'success'
        uses: actions/cache/save@v4
        with:
          path: ./.cache
          key: ${{ needs.setup.outputs.cache-key }}
