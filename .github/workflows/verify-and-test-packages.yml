name: Verify and Test Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_version: ${{ steps.get_version.outputs.RELEASE_VERSION }}
      cache-hit: ${{ steps.cache_check.outputs.cache-hit }}
      cache-key: ${{ steps.cache_check.outputs.cache-primary-key }}
    steps:
      - name: Add grace period after release publication
        if: github.event_name == 'release'
        run: sleep 1800

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Version
        id: get_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_tag=$(gh release view --json tagName --jq .tagName)
          if [ -z "$latest_tag" ]; then
            echo "No releases found. Halting workflow."
            exit 1
          fi
          version=$(echo "$latest_tag" | sed 's/v//')
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "Checking for version: $version"

      - name: Check if Already Verified via Cache
        id: cache_check
        uses: actions/cache/restore@v4
        with:
          path: ./.cache
          key: verification-flag-v${{ steps.get_version.outputs.RELEASE_VERSION }}

  chocolatey:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.verify.outputs.e2e_result }}
    steps:
      - name: 🍫 Verify and Test on Chocolatey
        id: verify
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "${{ needs.setup.outputs.release_version }}"
          $packageName = "winmemorycleaner"
          $e2e_result = "fail"
          $published = "false"

          Write-Host "Verifying '$packageName' version '$version' on Chocolatey..."
          $choco_output = choco search $packageName --exact --all-versions -r
          if ($choco_output -match "$version") {
            Write-Host "✅ Version found."
            $published = "true"
            Write-Host "Performing install and smoke test..."
            choco install $packageName --version $version -y
            $exe = Get-Command WinMemoryCleaner.exe
            & $exe.Source --version
            $e2e_result = "success"
            Write-Host "✅ E2E Test successful."
          } else {
            Write-Host "❌ Version not found."
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($published -ne "true") { exit 1 }

  scoop:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.verify.outputs.e2e_result }}
    steps:
      - name: 🍦 Verify and Test on Scoop
        id: verify
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "${{ needs.setup.outputs.release_version }}"
          $packageName = "winmemorycleaner"
          $e2e_result = "fail"
          $published = "false"

          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
          irm get.scoop.sh | iex
          scoop bucket add extras
          Write-Host "Updating Scoop buckets..."
          scoop update

          Write-Host "Verifying '$packageName' version '$version' on Scoop..."
          $scoop_output = scoop info $packageName
          if ($scoop_output -match "Version:\s*$version") {
            Write-Host "✅ Version found."
            $published = "true"
            Write-Host "Performing install and smoke test..."
            scoop install $packageName
            $exe = "$(scoop prefix $packageName)\WinMemoryCleaner.exe"
            & $exe --version
            $e2e_result = "success"
            Write-Host "✅ E2E Test successful."
          } else {
            Write-Host "❌ Version not found."
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($published -ne "true") { exit 1 }

  winget:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.verify.outputs.e2e_result }}
    steps:
      - name: 📦 Verify and Test on WinGet
        id: verify
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "${{ needs.setup.outputs.release_version }}"
          $packageId = "IgorMundstein.WinMemoryCleaner"
          $e2e_result = "fail"
          $published = "false"

          Write-Host "Updating WinGet source..."
          winget source update

          Write-Host "Verifying '$packageId' version '$version' on WinGet..."
          $winget_output = winget show --id $packageId --source winget --accept-source-agreements
          if ($winget_output -match "Version:\s*$version") {
            Write-Host "✅ Version found."
            $published = "true"
            Write-Host "Performing install and smoke test..."
            winget install --id $packageId --accept-source-agreements --accept-package-agreements
            $exe = Get-Command WinMemoryCleaner.exe
            & $exe.Source --version
            $e2e_result = "success"
            Write-Host "✅ E2E Test successful."
          } else {
            Write-Host "❌ Version not found."
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($published -ne "true") { exit 1 }

  summarize:
    runs-on: ubuntu-latest
    needs: [setup, chocolatey, scoop, winget]
    if: always()
    steps:
      - name: 📝 Report Final Status
        run: |
          if [ "${{ needs.setup.outputs.cache-hit }}" == "true" ]; then
            echo "✅ Version ${{ needs.setup.outputs.release_version }} was already verified. No new report generated."
            exit 0
          fi

          summary_row() {
            pm="$1"; emoji="$2"; status="$3"; test_result="$4"
            
            if [ "$status" == "true" ]; then pub_icon="✅ Published"; else pub_icon="❌ Not Published"; fi
            
            if [ "$test_result" == "success" ]; then e2e_icon="✅ Passed";
            elif [ "$status" == "true" ]; then e2e_icon="❌ Failed";
            else e2e_icon="⚠️ Skipped"; fi

            echo "| $emoji $pm | $pub_icon | $e2e_icon |" >> $GITHUB_STEP_SUMMARY
          }
          
          echo "### Publication Verification for v${{ needs.setup.outputs.release_version }}" >> $GITHUB_STEP_SUMMARY
          echo "| Package Manager | Publication Status | E2E Test |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
          summary_row "Chocolatey" "🍫" "${{ needs.chocolatey.outputs.published }}" "${{ needs.chocolatey.outputs.e2e_result }}"
          summary_row "Scoop"      "🍦" "${{ needs.scoop.outputs.published }}"      "${{ needs.scoop.outputs.e2e_result }}"
          summary_row "WinGet"     "📦" "${{ needs.winget.outputs.published }}"      "${{ needs.winget.outputs.e2e_result }}"

      - name: 💾 Save Success Flag to Cache
        if: |
          needs.setup.outputs.cache-hit != 'true' &&
          needs.chocolatey.outputs.published == 'true' && needs.chocolatey.outputs.e2e_result == 'success' &&
          needs.scoop.outputs.published == 'true' && needs.scoop.outputs.e2e_result == 'success' &&
          needs.winget.outputs.published == 'true' && needs.winget.outputs.e2e_result == 'success'
        uses: actions/cache/save@v4
        with:
          path: ./.cache
          key: ${{ needs.setup.outputs.cache-key }}
