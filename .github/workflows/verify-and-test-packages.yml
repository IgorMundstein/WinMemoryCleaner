name: Verify and Test Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_version: ${{ steps.get_version.outputs.RELEASE_VERSION }}
      cache-hit: ${{ steps.cache_check.outputs.cache-hit }}
      cache-key: ${{ steps.cache_check.outputs.cache-primary-key }}
    steps:
      - name: Add grace period after release publication
        if: github.event_name == 'release'
        run: sleep 1800

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Version
        id: get_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_tag=$(gh release view --json tagName --jq .tagName)
          if [ -z "$latest_tag" ]; then
            echo "No releases found. Halting workflow."
            exit 1
          fi
          version=$(echo "$latest_tag" | sed 's/v//')
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "Checking for version: $version"

      - name: Check if Already Verified via Cache
        id: cache_check
        uses: actions/cache/restore@v4
        with:
          path: ./.cache
          key: verification-flag-v${{ steps.get_version.outputs.RELEASE_VERSION }}

  chocolatey:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.verify.outputs.e2e_result }}
    steps:
      - name: üç´ Verify and Test on Chocolatey
        id: verify
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "${{ needs.setup.outputs.release_version }}"
          $packageName = "winmemorycleaner"
          $e2e_result = "fail"
          $published = "false"
          Write-Host "Verifying '$packageName' version '$version' on Chocolatey..."
          $choco_output = choco search $packageName --exact --all-versions -r
          if ($choco_output -match "$version") {
            Write-Host "‚úÖ Version found."
            $published = "true"
            Write-Host "Performing install and smoke test..."
            choco install $packageName --version $version -y
            $exe = Get-Command WinMemoryCleaner.exe
            & $exe.Source --version
            $e2e_result = "success"
            Write-Host "‚úÖ E2E Test successful."
          } else {
            Write-Host "‚ùå Version not found."
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($published -ne "true") { exit 1 }

  scoop:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.verify.outputs.e2e_result }}
    steps:
      - name: üç¶ Verify and Test on Scoop
        id: verify
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "${{ needs.setup.outputs.release_version }}"
          $packageName = "winmemorycleaner"
          $e2e_result = "fail"
          $published = "false"
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
          irm get.scoop.sh | iex
          scoop bucket add extras
          Write-Host "Updating Scoop buckets..."
          scoop update
          Write-Host "Verifying '$packageName' version '$version' on Scoop..."
          $scoop_output = scoop info $packageName
          if ($scoop_output -match "Version:\s*$version") {
            Write-Host "‚úÖ Version found."
            $published = "true"
            Write-Host "Performing install and smoke test..."
            scoop install $packageName
            $exe = "$(scoop prefix $packageName)\WinMemoryCleaner.exe"
            & $exe --version
            $e2e_result = "success"
            Write-Host "‚úÖ E2E Test successful."
          } else {
            Write-Host "‚ùå Version not found."
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($published -ne "true") { exit 1 }

  winget-diagnostics:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    steps:
      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è Explore the Runner Environment for Winget
        shell: pwsh
        run: |
          Write-Host "--- Starting Environment Diagnostics ---"
          
          Write-Host "`n--- 1. Environment Variables ---"
          Write-Host "LOCALAPPDATA: ${env:LOCALAPPDATA}"
          Write-Host "PATH: $($env:PATH)"
          
          $wingetDir = "${env:LOCALAPPDATA}\Microsoft\WindowsApps"
          Write-Host "`n--- 2. Exploring Expected Winget Directory: $wingetDir ---"
          if (Test-Path $wingetDir) {
              Write-Host "‚úÖ Directory exists. Listing contents and properties..."
              try {
                $items = Get-ChildItem -Path $wingetDir -ErrorAction Stop
                if ($items) {
                    $items | ForEach-Object { Get-Item -Path $_.FullName | Format-List Name, FullName, LinkType, Target, Attributes, Length }
                } else {
                    Write-Host "Directory is empty."
                }
              } catch {
                Write-Host "##[error]Could not list contents of $wingetDir. Error: $($_.Exception.Message)"
              }
          } else {
              Write-Host "‚ùå Directory does not exist."
          }

          Write-Host "`n--- 3. Searching for winget.exe on C: drive ---"
          Write-Host "This may take a few minutes..."
          $foundFiles = Get-ChildItem -Path C:\ -Recurse -Filter "winget.exe" -ErrorAction SilentlyContinue
          
          if ($foundFiles) {
              Write-Host "üî•üî•üî• FOUND winget.exe! üî•üî•üî•"
              $foundFiles | ForEach-Object {
                  Write-Host "Found at: $($_.FullName)"
                  Get-Item -Path $_.FullName | Format-List Name, FullName, LinkType, Target, Attributes, Length
              }
          } else {
              Write-Host "‚ùå‚ùå‚ùå SEARCH COMPLETE. winget.exe was NOT found anywhere on the C: drive. ‚ùå‚ùå‚ùå"
          }

          Write-Host "`n--- Diagnostics Complete ---"
          Write-Host "##[error]This job is designed to fail to provide diagnostic logs. Please review the output above."
          exit 1

  summarize:
    runs-on: ubuntu-latest
    # Note: This will not run until the diagnostics job is replaced with the final working job.
    needs: [setup, chocolatey, scoop, winget-diagnostics]
    if: always()
    steps:
      - name: üìù Report Final Status
        run: |
          echo "Workflow paused for diagnostics. Summary will be generated after a fix is implemented."
