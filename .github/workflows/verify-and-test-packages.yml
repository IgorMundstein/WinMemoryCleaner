name: Verify and Test Packages Publication Statuses

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_version: ${{ steps.get_version.outputs.RELEASE_VERSION }}
      cache-hit: ${{ steps.cache_check.outputs.cache-hit }}
      cache-key: ${{ steps.cache_check.outputs.cache-primary-key }}
    steps:
      - name: Delay 24 hours after release
        if: github.event_name == 'release'
        run: sleep 86400

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Version
        id: get_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_tag=$(gh release view --json tagName --jq .tagName)
          if [ -z "$latest_tag" ]; then
            echo "No releases found in this repository. Halting workflow."
            exit 1
          fi
          version=$(echo "$latest_tag" | sed 's/v//')
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "Checking version $version"

      - name: Check if Already Verified via Cache
        id: cache_check
        uses: actions/cache/restore@v4
        with:
          path: ./.cache
          key: verification-flag-${{ steps.get_version.outputs.RELEASE_VERSION }}

  chocolatey:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.e2e.outputs.e2e_result }}
    steps:
      - name: Verify on Chocolatey üç´
        id: verify
        shell: pwsh
        run: |
          $version_to_check = "${{ needs.setup.outputs.release_version }}"
          $choco_output = choco search winmemorycleaner --exact --all-versions -r
          if ($choco_output -match "$version_to_check") {
            echo "published=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            echo "published=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }

      - name: Chocolatey Install & Smoke Test üöÄ
        id: e2e
        if: steps.verify.outputs.published == 'true'
        shell: pwsh
        run: |
          $result = "success"
          try {
            choco install winmemorycleaner --pre -y
            if (-not (Get-Command WinMemoryCleaner.exe -ErrorAction SilentlyContinue)) {
              Write-Host "::error::WinMemoryCleaner.exe not found after Chocolatey install"
              $result = "fail"
            } else {
              WinMemoryCleaner.exe --version | Write-Host
            }
          } catch {
            $result = "fail"
          }
          echo "e2e_result=$result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($result -eq "fail") { exit 1 }

  scoop:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.e2e.outputs.e2e_result }}
    steps:
      - name: Verify on Scoop üç¶
        id: verify
        shell: pwsh
        run: |
          $version_to_check = "${{ needs.setup.outputs.release_version }}"
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
          irm get.scoop.sh | iex
          $scoop_output = ""
          try { $scoop_output = scoop info winmemorycleaner -ErrorAction Stop } catch {}
          if ($scoop_output -match "Version:\s*$version_to_check") {
            echo "published=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            echo "published=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }

      - name: Scoop Install & Smoke Test üöÄ
        id: e2e
        if: steps.verify.outputs.published == 'true'
        shell: pwsh
        run: |
          $result = "success"
          try {
            irm get.scoop.sh | iex
            scoop bucket add extras
            scoop install winmemorycleaner
            $exe = "$(scoop prefix winmemorycleaner)\WinMemoryCleaner.exe"
            if (-not (Test-Path $exe)) {
              Write-Host "::error::WinMemoryCleaner.exe not found after Scoop install"
              $result = "fail"
            } else {
              & $exe --version | Write-Host
            }
          } catch {
            $result = "fail"
          }
          echo "e2e_result=$result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($result -eq "fail") { exit 1 }

  winget:
    runs-on: windows-latest
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    outputs:
      published: ${{ steps.verify.outputs.published }}
      e2e_result: ${{ steps.e2e.outputs.e2e_result }}
    steps:
      - name: Verify on WinGet üì¶
        id: verify
        shell: pwsh
        run: |
          $version_to_check = "${{ needs.setup.outputs.release_version }}"
          $env:PATH += ";${env:LOCALAPPDATA}\Microsoft\WindowsApps"
          $winget_output = ""
          try { $winget_output = winget show --id "IgorMundstein.WinMemoryCleaner" --source winget --accept-source-agreements -ErrorAction Stop } catch {}

          if ($winget_output -match "Version:\s*$version_to_check") {
            echo "published=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            echo "published=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }

      - name: WinGet Install & Smoke Test üöÄ
        id: e2e
        if: steps.verify.outputs.published == 'true'
        shell: pwsh
        run: |
          $result = "success"
          try {
            $pkgName = "IgorMundstein.WinMemoryCleaner"
            winget install --id $pkgName --accept-source-agreements --accept-package-agreements --silent -o .
            if (-not (Test-Path ".\WinMemoryCleaner.exe")) {
              Write-Host "::error::WinMemoryCleaner.exe not found after WinGet install"
              $result = "fail"
            } else {
              .\WinMemoryCleaner.exe --version | Write-Host
            }
          } catch {
            $result = "fail"
          }
          echo "e2e_result=$result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($result -eq "fail") { exit 1 }

  summarize:
    runs-on: ubuntu-latest
    needs: [setup, chocolatey, scoop, winget]
    if: always()
    steps:
      - name: Report Final Status
        run: |
          if [ "${{ needs.setup.outputs.cache-hit }}" == "true" ]; then
            echo "‚úÖ Version ${{ needs.setup.outputs.release_version }} is already verified (cache hit)."
            exit 0
          fi

          summary_row() {
            pm="$1"
            emoji="$2"
            status="$3"
            test="$4"
            # Publication
            if [ "$status" = "true" ]; then
              pub_icon="‚úÖ"
            else
              pub_icon="‚ùå"
            fi
            # E2E
            if [ "$test" = "success" ]; then
              e2e_icon="‚úÖ"
            elif [ "$status" = "true" ]; then
              e2e_icon="‚ùå"
            else
              e2e_icon="‚ö†Ô∏è"
            fi
            echo "$emoji $pm: Published $pub_icon, E2E $e2e_icon"
          }

          summary_row "Chocolatey" "üç´" "${{ needs.chocolatey.outputs.published }}" "${{ needs.chocolatey.outputs.e2e_result }}"
          summary_row "Scoop"      "üç¶" "${{ needs.scoop.outputs.published }}"      "${{ needs.scoop.outputs.e2e_result }}"
          summary_row "WinGet"     "üì¶" "${{ needs.winget.outputs.published }}"     "${{ needs.winget.outputs.e2e_result }}"

      - name: Save Success Flag to Cache
        if: needs.setup.outputs.cache-hit != 'true' && needs.chocolatey.outputs.published == 'true' && needs.chocolatey.outputs.e2e_result == 'success' && needs.scoop.outputs.published == 'true' && needs.scoop.outputs.e2e_result == 'success' && needs.winget.outputs.published == 'true' && needs.winget.outputs.e2e_result == 'success'
        uses: actions/cache/save@v4
        with:
          path: ./.cache
          key: ${{ needs.setup.outputs.cache-key }}
