name: Verify and Test Packages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  release:
    types: [published]

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_version: ${{ steps.get_version.outputs.RELEASE_VERSION }}
      cache-key: ${{ steps.cache_check.outputs.cache-primary-key }}
      cache-hit: ${{ steps.cache_restore.outputs.cache-hit }}
    steps:
      - name: "‚è≥ Add grace period after release publication"
        if: github.event_name == 'release'
        run: sleep 1800

      - name: "üîΩ Checkout Repository"
        uses: actions/checkout@v4

      - name: "üè∑Ô∏è Get Latest Release Version"
        id: get_version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_tag=$(gh release view --json tagName --jq .tagName)
          if [ -z "$latest_tag" ]; then
            echo "No releases found. Halting workflow."
            exit 1
          fi
          version="$latest_tag"
          echo "RELEASE_VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "Checking for version: $version"

      - name: "üóÑÔ∏è Set cache key"
        id: cache_check
        run: |
          echo "cache-primary-key=verification-flag-v${{ steps.get_version.outputs.RELEASE_VERSION }}" >> $GITHUB_OUTPUT

      - name: "üóÑÔ∏è Restore Publication Success Cache"
        id: cache_restore
        uses: actions/cache/restore@v4
        with:
          path: ./.cache
          key: verification-flag-v${{ steps.get_version.outputs.RELEASE_VERSION }}

  choco:
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    runs-on: windows-latest
    outputs:
      published: ${{ steps.choco.outputs.published }}
      e2e: ${{ steps.choco.outputs.e2e_result }}
    steps:
      - name: "üç´ Chocolatey Verify and Test"
        id: choco
        shell: pwsh
        env:
          RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "$env:RELEASE_VERSION"
          $packageName = "winmemorycleaner"
          $e2e_result = "fail"
          $published = "false"
          Write-Host "===[Chocolatey] Checking $packageName version $version==="
          try {
            $choco_output = choco search $packageName --exact --all-versions -r
            Write-Host "Chocolatey search output:`n$choco_output"
            if ($choco_output -match "$version") {
              Write-Host "[Chocolatey] ‚úÖ Version found."
              $published = "true"
              Write-Host "[Chocolatey] Installing package..."
              choco install $packageName --version $version -y --no-progress
              $exe = Get-Command WinMemoryCleaner.exe -ErrorAction SilentlyContinue
              if ($null -eq $exe) {
                Write-Host "[Chocolatey] ‚ùå WinMemoryCleaner.exe not found after install"
                $e2e_result = "fail"
                echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                exit 1
              } else {
                Write-Host "[Chocolatey] Running version command..."
                & $exe.Source --version | Write-Host
                $e2e_result = "success"
                Write-Host "[Chocolatey] ‚úÖ E2E Test successful."
              }
            } else {
              Write-Host "[Chocolatey] ‚ùå Version not found."
              $published = "false"
              $e2e_result = "skipped"
              echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
            }
          } catch {
            Write-Host "[Chocolatey] ‚ùå Error: $($_.Exception.Message)"
            $published = "false"
            $e2e_result = "skipped"
            echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  scoop:
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    runs-on: windows-latest
    outputs:
      published: ${{ steps.scoop.outputs.published }}
      e2e: ${{ steps.scoop.outputs.e2e_result }}
    steps:
      - name: "üç¶ Scoop Verify and Test"
        id: scoop
        shell: pwsh
        env:
          RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
        run: |
          $ErrorActionPreference = 'Stop'
          $version = "$env:RELEASE_VERSION"
          $packageName = "winmemorycleaner"
          $e2e_result = "fail"
          $published = "false"
          Write-Host "===[Scoop] Ensuring Scoop is installed==="
          try {
            if (-not (Get-Command scoop -ErrorAction SilentlyContinue)) {
              irm get.scoop.sh | iex
            }
            scoop update
            scoop bucket add extras -f
            scoop update extras
            Write-Host "===[Scoop] Checking $packageName version $version==="
            $scoop_info = scoop info $packageName
            Write-Host "Scoop info output:`n$scoop_info"
            if ($scoop_info -match "Version:\s*$version") {
              Write-Host "[Scoop] ‚úÖ Version found."
              $published = "true"
              Write-Host "[Scoop] Installing package..."
              scoop install $packageName
              $exe = "$(scoop prefix $packageName)\WinMemoryCleaner.exe"
              if (-not (Test-Path $exe)) {
                Write-Host "[Scoop] ‚ùå WinMemoryCleaner.exe not found after install"
                $e2e_result = "fail"
                echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                exit 1
              } else {
                Write-Host "[Scoop] Running version command..."
                & $exe --version | Write-Host
                $e2e_result = "success"
                Write-Host "[Scoop] ‚úÖ E2E Test successful."
              }
            } else {
              Write-Host "[Scoop] ‚ùå Version not found."
              $published = "false"
              $e2e_result = "skipped"
              echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
            }
          } catch {
            Write-Host "[Scoop] ‚ùå Error: $($_.Exception.Message)"
            $published = "false"
            $e2e_result = "skipped"
            echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  winget_cli:
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    runs-on: windows-latest
    continue-on-error: true
    outputs:
      found: ${{ steps.detect_winget.outputs.found }}
      published: ${{ steps.winget.outputs.published }}
      e2e: ${{ steps.winget.outputs.e2e_result }}
    steps:
      - name: "üîé Detect WinGet CLI & Version"
        id: detect_winget
        shell: pwsh
        run: |
          $found = 'false'
          $wingetPath = ''
          try {
            $wingetCmd = Get-Command winget -ErrorAction Stop
            $found = 'true'
            $wingetPath = $wingetCmd.Source
          } catch {
            $possiblePath = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"
            if (Test-Path $possiblePath) {
              $found = 'true'
              $wingetPath = $possiblePath
            }
          }
          Write-Host "===[WinGet] Found: $found"
          Write-Host "===[WinGet] Path: $wingetPath"
          echo "found=$found" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "path=$wingetPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: "üì¶ WinGet CLI Verify and Test"
        id: winget
        if: steps.detect_winget.outputs.found == 'true'
        shell: pwsh
        env:
          RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
        run: |
          $version_to_check = "$env:RELEASE_VERSION"
          $wingetExe = "${{ steps.detect_winget.outputs.path }}"
          if (-not (Test-Path $wingetExe)) { $wingetExe = "winget.exe" }
          $pkgName = "IgorMundstein.WinMemoryCleaner"
          $published = "false"
          $e2e_result = "fail"
          Write-Host "===[WinGet] Using $wingetExe"
          try {
            Write-Host "[WinGet] Updating sources..."
            try { & $wingetExe source update } catch { Write-Host "[WinGet] source update failed (non-fatal)" }
            Write-Host "[WinGet] Showing package info..."
            $winget_output = & $wingetExe show --id $pkgName --source winget --accept-source-agreements
            Write-Host "WinGet show output:`n$winget_output"
            if ($winget_output -match "Version:\s*$version_to_check") {
              Write-Host "[WinGet] ‚úÖ Version found."
              $published = "true"
              Write-Host "[WinGet] Installing package..."
              & $wingetExe install --id $pkgName --accept-source-agreements --accept-package-agreements --silent -o .
              if (-not (Test-Path ".\WinMemoryCleaner.exe")) {
                Write-Host "[WinGet] ‚ùå WinMemoryCleaner.exe not found after install"
                $e2e_result = "fail"
                echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                exit 1
              } else {
                Write-Host "[WinGet] Running version command..."
                .\WinMemoryCleaner.exe --version | Write-Host
                $e2e_result = "success"
                Write-Host "[WinGet] ‚úÖ E2E Test successful."
              }
            } else {
              Write-Host "[WinGet] ‚ùå Version not found."
              $published = "false"
              $e2e_result = "skipped"
              echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
            }
          } catch {
            Write-Host "[WinGet] ‚ùå Error: $($_.Exception.Message)"
            $published = "false"
            $e2e_result = "skipped"
            echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            exit 1
          }
          echo "published=$published" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "e2e_result=$e2e_result" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  winget_manifest:
    needs: setup
    if: needs.setup.outputs.cache-hit != 'true'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.check_manifest.outputs.published }}
      manifest_found: ${{ steps.check_manifest_url.outputs.manifest_found }}
    continue-on-error: true
    steps:
      - name: "üåê Check WinGet Manifest in winget-pkgs repo (API)"
        id: check_manifest
        shell: bash
        env:
          RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
        run: |
          file_path="manifests/i/IgorMundstein/WinMemoryCleaner/${RELEASE_VERSION}/IgorMundstein.WinMemoryCleaner.installer.yaml"
          url="https://api.github.com/repos/microsoft/winget-pkgs/contents/${file_path}"
          echo "Checking manifest existence: $url"
          if curl --fail -s "$url" > /dev/null; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Manifest found at $url"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "‚ùå Manifest NOT found at $url"
          fi

      - name: "üåê Check WinGet Manifest in winget-pkgs repo (raw URL, non-blocking)"
        id: check_manifest_url
        shell: bash
        continue-on-error: true
        env:
          RELEASE_VERSION: ${{ needs.setup.outputs.release_version }}
        run: |
          file_path="manifests/i/IgorMundstein/WinMemoryCleaner/${RELEASE_VERSION}/IgorMundstein.WinMemoryCleaner.installer.yaml"
          manifest_url="https://raw.githubusercontent.com/microsoft/winget-pkgs/master/${file_path}"
          if curl --fail -s "$manifest_url" > /dev/null; then
            echo "manifest_found=true" >> $GITHUB_OUTPUT
          else
            echo "manifest_found=false" >> $GITHUB_OUTPUT
          fi

  summarize:
    needs: [setup, choco, scoop, winget_cli, winget_manifest]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: "üìù Publication Summary"
        run: |
          VERSION="${{ needs.setup.outputs.release_version }}"
          echo "### Publication Verification for $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "| Package Manager | Publication Status      | E2 Test         |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|------------------------|-----------------|" >> $GITHUB_STEP_SUMMARY

          CH_PUB="${{ needs.choco.outputs.published }}"
          CH_E2E="${{ needs.choco.outputs.e2e }}"
          if [ "$CH_PUB" == "true" ]; then CH_STATUS="‚úÖ Published"; else CH_STATUS="‚ùå Not Published"; fi
          if [ "$CH_E2E" == "success" ]; then CH_E2E_STATUS="‚úÖ Passed"; elif [ "$CH_PUB" == "true" ]; then CH_E2E_STATUS="‚ùå Failed"; else CH_E2E_STATUS="‚ö†Ô∏è Skipped"; fi
          echo "| üç´ Chocolatey | $CH_STATUS             | $CH_E2E_STATUS   |" >> $GITHUB_STEP_SUMMARY

          SC_PUB="${{ needs.scoop.outputs.published }}"
          SC_E2E="${{ needs.scoop.outputs.e2e }}"
          if [ "$SC_PUB" == "true" ]; then SC_STATUS="‚úÖ Published"; else SC_STATUS="‚ùå Not Published"; fi
          if [ "$SC_E2E" == "success" ]; then SC_E2E_STATUS="‚úÖ Passed"; elif [ "$SC_PUB" == "true" ]; then SC_E2E_STATUS="‚ùå Failed"; else SC_E2E_STATUS="‚ö†Ô∏è Skipped"; fi
          echo "| üç¶ Scoop      | $SC_STATUS             | $SC_E2E_STATUS   |" >> $GITHUB_STEP_SUMMARY

          WG_CLI_FOUND="${{ needs.winget_cli.outputs.found }}"
          WG_CLI_PUB="${{ needs.winget_cli.outputs.published }}"
          WG_CLI_E2E="${{ needs.winget_cli.outputs.e2e }}"
          if [ "$WG_CLI_FOUND" == "true" ]; then
            if [ "$WG_CLI_PUB" == "true" ]; then WG_CLI_STATUS="‚úÖ Published"; else WG_CLI_STATUS="‚ùå Not Published"; fi
            if [ "$WG_CLI_E2E" == "success" ]; then WG_CLI_E2E_STATUS="‚úÖ Passed"; elif [ "$WG_CLI_PUB" == "true" ]; then WG_CLI_E2E_STATUS="‚ùå Failed"; else WG_CLI_E2E_STATUS="‚ö†Ô∏è Skipped"; fi
          else
            WG_CLI_STATUS="‚ö†Ô∏è Not Installed"
            WG_CLI_E2E_STATUS="N/A Not Available"
          fi
          echo "| üì¶ WinGet CLI | $WG_CLI_STATUS         | $WG_CLI_E2E_STATUS|" >> $GITHUB_STEP_SUMMARY

          WG_MANIFEST_PUB="${{ needs.winget_manifest.outputs.published }}"
          if [ "$WG_MANIFEST_PUB" == "true" ]; then
            WG_MANIFEST_STATUS="‚úÖ Manifest via API"
          else
            WG_MANIFEST_STATUS="‚ùå Manifest via API"
          fi
          echo "| üåê WinGet Manifest (API) | $WG_MANIFEST_STATUS | N/A Not Available |" >> $GITHUB_STEP_SUMMARY

          WG_MANIFEST_FOUND="${{ needs.winget_manifest.outputs.manifest_found }}"
          if [ "$WG_MANIFEST_FOUND" == "true" ]; then
            WG_MANIFEST_RAW_STATUS="‚úÖ Manifest via Raw"
          else
            WG_MANIFEST_RAW_STATUS="‚ùå Manifest via Raw"
          fi
          echo "| üåê WinGet Manifest (RAW) | $WG_MANIFEST_RAW_STATUS | N/A Not Available |" >> $GITHUB_STEP_SUMMARY

          echo ""
          echo "_WinGet CLI test is authoritative; manifest checks are informational only._" >> $GITHUB_STEP_SUMMARY

      - name: "Set cache flag if all published"
        id: allpublished
        run: |
          ALL_PUBLISHED=true
          if [ "${{ needs.choco.outputs.published }}" != "true" ]; then ALL_PUBLISHED=false; fi
          if [ "${{ needs.scoop.outputs.published }}" != "true" ]; then ALL_PUBLISHED=false; fi
          if [ "${{ needs.winget_cli.outputs.published }}" != "true" ]; then ALL_PUBLISHED=false; fi
          if [ "${{ needs.winget_manifest.outputs.published }}" != "true" ]; then ALL_PUBLISHED=false; fi

          echo "ALL_PUBLISHED=$ALL_PUBLISHED" >> $GITHUB_ENV

          if [ "$ALL_PUBLISHED" = "true" ]; then
            mkdir -p .cache
            echo "all-published" > .cache/success.flag
            echo "All package managers published. Cache will be saved."
          else
            echo "Not all package managers published. Cache will NOT be saved."
          fi

      - name: "üíæ Save Success Flag to Cache"
        if: env.ALL_PUBLISHED == 'true'
        uses: actions/cache/save@v4
        with:
          path: ./.cache
          key: ${{ needs.setup.outputs.cache-key }}
