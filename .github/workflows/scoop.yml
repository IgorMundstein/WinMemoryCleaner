name: Submit to Scoop

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

env:
  FORK_REPO: ${{ github.repository_owner }}/Scoop
  UPSTREAM_REPO: ScoopInstaller/Main

jobs:
  submit:
    name: Submit to Scoop
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Release Tag
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('tag', release.tag_name);

      - name: Download & SHA256
        id: download
        run: |
          $releaseTag = "${{ steps.get_release.outputs.tag }}"
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/$releaseTag/WinMemoryCleaner.exe"
          Invoke-WebRequest -Uri $downloadUrl -OutFile WinMemoryCleaner.exe
          $sha256 = (Get-FileHash -Path WinMemoryCleaner.exe -Algorithm SHA256).Hash.ToLower()
          echo "sha256=$sha256" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Create Manifest File
        id: create_manifest
        env:
          RELEASE_TAG: ${{ steps.get_release.outputs.tag }}
          SHA256: ${{ steps.download.outputs.sha256 }}
        run: |
          $manifestDir = "scoop-manifest"
          New-Item -ItemType Directory -Path $manifestDir -Force
          $manifestContent = @"
          {
              "version": "$(${env:RELEASE_TAG}.TrimStart('v'))",
              "description": "This free RAM cleaner uses native Windows features to clear memory areas.",
              "homepage": "https://github.com/IgorMundstein/WinMemoryCleaner/",
              "license": "GPL-3.0",
              "architecture": {
                  "64bit": {
                      "url": "https://github.com/${{ github.repository }}/releases/download/$env:RELEASE_TAG/WinMemoryCleaner.exe",
                      "hash": "$env:SHA256"
                  }
              },
              "bin": "WinMemoryCleaner.exe",
              "shortcuts": [
                  [
                      "WinMemoryCleaner.exe",
                      "Windows Memory Cleaner"
                  ]
              ],
              "checkver": "github",
              "autoupdate": {
                  "architecture": {
                      "64bit": {
                          "url": "https://github.com/${{ github.repository }}/releases/download/`$version/WinMemoryCleaner.exe"
                      }
                  }
              }
          }
          "@
          $manifestFile = "$manifestDir/winmemorycleaner.json"
          $manifestContent | Out-File -FilePath $manifestFile -Encoding UTF8
          echo "manifest_path=$manifestFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Lint JSON manifest
        run: |
          choco install jq -y
          jq . "$(echo ${{ steps.create_manifest.outputs.manifest_path }})" >nul
        shell: pwsh

      - name: Quality check Scoop manifest
        run: |
          $manifestPath = "$(echo ${{ steps.create_manifest.outputs.manifest_path }})"
          $json = Get-Content $manifestPath | ConvertFrom-Json
          $errors = @()
          if (-not $json.version -or $json.version -notmatch '^\d+\.\d+\.\d+$') {
            $errors += "Version must be present and follow semantic versioning (e.g., 1.2.3)."
          }
          if (-not $json.description -or $json.description.Length -lt 10) {
            $errors += "Description must be at least 10 characters."
          }
          if (-not $json.homepage) {
            $errors += "Homepage must be present."
          }
          if (-not $json.license) {
            $errors += "License must be present."
          }
          if (-not $json.architecture.'64bit'.url -or -not $json.architecture.'64bit'.hash) {
            $errors += "64bit architecture url and hash must be present."
          }
          if ($errors.Count -gt 0) {
            Write-Host "::error::Manifest quality check failed:`n$($errors -join "`n")"
            exit 1
          }
        shell: pwsh

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          RELEASE_TAG: ${{ steps.get_release.outputs.tag }}
          SHA256: ${{ steps.download.outputs.sha256 }}
          FORK_OWNER: ${{ github.repository_owner }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git clone "https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ env.FORK_REPO }}.git" scoop-bucket-clone
          cd scoop-bucket-clone
          git remote add upstream "https://github.com/${{ env.UPSTREAM_REPO }}.git"
          git fetch upstream master --depth=1
          $branchName = "update/WinMemoryCleaner-$env:RELEASE_TAG"
          git checkout -b "$branchName" upstream/master
          $manifestDir = "bucket"
          cp ../scoop-manifest/winmemorycleaner.json "$manifestDir/winmemorycleaner.json"
          git add .
          git commit -m "WinMemoryCleaner: Add version $env:RELEASE_TAG"
          git push --force origin "$branchName"
          gh pr create `
            --repo "${{ env.UPSTREAM_REPO }}" `
            --head "$env:FORK_OWNER`:$branchName" `
            --base master `
            --title "WinMemoryCleaner: Add version $env:RELEASE_TAG" `
            --body "Automated submission for WinMemoryCleaner version $env:RELEASE_TAG."
        shell: pwsh
